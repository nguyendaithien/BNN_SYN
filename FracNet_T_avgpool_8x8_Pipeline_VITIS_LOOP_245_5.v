// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FracNet_T_avgpool_8x8_Pipeline_VITIS_LOOP_245_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        lhs_reload,
        lhs_206_reload,
        lhs_207_reload,
        lhs_208_reload,
        lhs_209_reload,
        lhs_210_reload,
        lhs_211_reload,
        lhs_212_reload,
        lhs_213_reload,
        lhs_214_reload,
        lhs_215_reload,
        lhs_216_reload,
        lhs_217_reload,
        lhs_218_reload,
        lhs_219_reload,
        lhs_220_reload,
        tmp_479,
        outputs_address0,
        outputs_ce0,
        outputs_we0,
        outputs_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] lhs_reload;
input  [31:0] lhs_206_reload;
input  [31:0] lhs_207_reload;
input  [31:0] lhs_208_reload;
input  [31:0] lhs_209_reload;
input  [31:0] lhs_210_reload;
input  [31:0] lhs_211_reload;
input  [31:0] lhs_212_reload;
input  [31:0] lhs_213_reload;
input  [31:0] lhs_214_reload;
input  [31:0] lhs_215_reload;
input  [31:0] lhs_216_reload;
input  [31:0] lhs_217_reload;
input  [31:0] lhs_218_reload;
input  [31:0] lhs_219_reload;
input  [31:0] lhs_220_reload;
input  [5:0] tmp_479;
output  [5:0] outputs_address0;
output   outputs_ce0;
output   outputs_we0;
output  [31:0] outputs_d0;

reg ap_idle;
reg outputs_ce0;
reg outputs_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln245_fu_229_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire  signed [26:0] p_Val2_s_fu_339_p3;
reg  signed [26:0] p_Val2_s_reg_450;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] p_Result_s_fu_347_p2;
reg   [0:0] p_Result_s_reg_455;
reg   [0:0] p_Result_968_reg_461;
reg   [0:0] tmp_1856_reg_467;
wire   [5:0] add_ln247_fu_369_p2;
reg   [5:0] add_ln247_reg_473;
wire   [63:0] zext_ln247_fu_436_p1;
wire    ap_block_pp0_stage0;
reg   [4:0] k_fu_102;
wire   [4:0] add_ln245_fu_235_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_k_1;
wire   [31:0] tmp_fu_245_p18;
wire   [53:0] t_fu_283_p3;
wire   [53:0] sub_ln1349_fu_299_p2;
wire   [25:0] trunc_ln1349_s_fu_305_p4;
wire   [26:0] zext_ln1349_fu_315_p1;
wire   [25:0] trunc_ln1349_32_fu_325_p4;
wire   [0:0] tmp_1854_fu_291_p3;
wire   [26:0] sub_ln1349_32_fu_319_p2;
wire   [26:0] zext_ln1349_32_fu_335_p1;
wire   [5:0] zext_ln245_fu_241_p1;
wire   [0:0] or_ln941_fu_383_p2;
wire   [0:0] xor_ln941_fu_387_p2;
wire   [0:0] and_ln942_fu_398_p2;
wire   [0:0] xor_ln942_fu_402_p2;
wire   [0:0] overflow_fu_392_p2;
wire   [0:0] underflow_fu_408_p2;
wire   [0:0] or_ln392_fu_421_p2;
wire   [31:0] select_ln392_520_fu_413_p3;
wire  signed [31:0] sext_ln859_fu_380_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

FracNet_T_mux_165_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mux_165_32_1_1_U2586(
    .din0(lhs_reload),
    .din1(lhs_206_reload),
    .din2(lhs_207_reload),
    .din3(lhs_208_reload),
    .din4(lhs_209_reload),
    .din5(lhs_210_reload),
    .din6(lhs_211_reload),
    .din7(lhs_212_reload),
    .din8(lhs_213_reload),
    .din9(lhs_214_reload),
    .din10(lhs_215_reload),
    .din11(lhs_216_reload),
    .din12(lhs_217_reload),
    .din13(lhs_218_reload),
    .din14(lhs_219_reload),
    .din15(lhs_220_reload),
    .din16(ap_sig_allocacmp_k_1),
    .dout(tmp_fu_245_p18)
);

FracNet_T_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln245_fu_229_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_102 <= add_ln245_fu_235_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_102 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln245_fu_229_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln247_reg_473 <= add_ln247_fu_369_p2;
        p_Result_968_reg_461 <= p_Val2_s_fu_339_p3[32'd26];
        p_Result_s_reg_455 <= p_Result_s_fu_347_p2;
        p_Val2_s_reg_450 <= p_Val2_s_fu_339_p3;
        tmp_1856_reg_467 <= p_Val2_s_fu_339_p3[32'd26];
    end
end

always @ (*) begin
    if (((icmp_ln245_fu_229_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_k_1 = k_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outputs_ce0 = 1'b1;
    end else begin
        outputs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outputs_we0 = 1'b1;
    end else begin
        outputs_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln245_fu_235_p2 = (ap_sig_allocacmp_k_1 + 5'd1);

assign add_ln247_fu_369_p2 = (zext_ln245_fu_241_p1 + tmp_479);

assign and_ln942_fu_398_p2 = (tmp_1856_reg_467 & p_Result_968_reg_461);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln245_fu_229_p2 = ((ap_sig_allocacmp_k_1 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln392_fu_421_p2 = (underflow_fu_408_p2 | overflow_fu_392_p2);

assign or_ln941_fu_383_p2 = (tmp_1856_reg_467 | p_Result_968_reg_461);

assign outputs_address0 = zext_ln247_fu_436_p1;

assign outputs_d0 = ((or_ln392_fu_421_p2[0:0] == 1'b1) ? select_ln392_520_fu_413_p3 : sext_ln859_fu_380_p1);

assign overflow_fu_392_p2 = (xor_ln941_fu_387_p2 & or_ln941_fu_383_p2);

assign p_Result_s_fu_347_p2 = (($signed(t_fu_283_p3) < $signed(54'd18014398241046529)) ? 1'b1 : 1'b0);

assign p_Val2_s_fu_339_p3 = ((tmp_1854_fu_291_p3[0:0] == 1'b1) ? sub_ln1349_32_fu_319_p2 : zext_ln1349_32_fu_335_p1);

assign select_ln392_520_fu_413_p3 = ((overflow_fu_392_p2[0:0] == 1'b1) ? 32'd2147483647 : 32'd2147483648);

assign sext_ln859_fu_380_p1 = p_Val2_s_reg_450;

assign sub_ln1349_32_fu_319_p2 = (27'd0 - zext_ln1349_fu_315_p1);

assign sub_ln1349_fu_299_p2 = (54'd0 - t_fu_283_p3);

assign t_fu_283_p3 = {{tmp_fu_245_p18}, {22'd0}};

assign tmp_1854_fu_291_p3 = tmp_fu_245_p18[32'd31];

assign trunc_ln1349_32_fu_325_p4 = {{tmp_fu_245_p18[31:6]}};

assign trunc_ln1349_s_fu_305_p4 = {{sub_ln1349_fu_299_p2[53:28]}};

assign underflow_fu_408_p2 = (xor_ln942_fu_402_p2 & p_Result_s_reg_455);

assign xor_ln941_fu_387_p2 = (p_Result_s_reg_455 ^ 1'd1);

assign xor_ln942_fu_402_p2 = (1'd1 ^ and_ln942_fu_398_p2);

assign zext_ln1349_32_fu_335_p1 = trunc_ln1349_32_fu_325_p4;

assign zext_ln1349_fu_315_p1 = trunc_ln1349_s_fu_305_p4;

assign zext_ln245_fu_241_p1 = ap_sig_allocacmp_k_1;

assign zext_ln247_fu_436_p1 = add_ln247_reg_473;

endmodule //FracNet_T_avgpool_8x8_Pipeline_VITIS_LOOP_245_5
