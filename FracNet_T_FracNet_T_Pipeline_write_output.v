// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FracNet_T_FracNet_T_Pipeline_write_output (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_RESULT_AWVALID,
        m_axi_RESULT_AWREADY,
        m_axi_RESULT_AWADDR,
        m_axi_RESULT_AWID,
        m_axi_RESULT_AWLEN,
        m_axi_RESULT_AWSIZE,
        m_axi_RESULT_AWBURST,
        m_axi_RESULT_AWLOCK,
        m_axi_RESULT_AWCACHE,
        m_axi_RESULT_AWPROT,
        m_axi_RESULT_AWQOS,
        m_axi_RESULT_AWREGION,
        m_axi_RESULT_AWUSER,
        m_axi_RESULT_WVALID,
        m_axi_RESULT_WREADY,
        m_axi_RESULT_WDATA,
        m_axi_RESULT_WSTRB,
        m_axi_RESULT_WLAST,
        m_axi_RESULT_WID,
        m_axi_RESULT_WUSER,
        m_axi_RESULT_ARVALID,
        m_axi_RESULT_ARREADY,
        m_axi_RESULT_ARADDR,
        m_axi_RESULT_ARID,
        m_axi_RESULT_ARLEN,
        m_axi_RESULT_ARSIZE,
        m_axi_RESULT_ARBURST,
        m_axi_RESULT_ARLOCK,
        m_axi_RESULT_ARCACHE,
        m_axi_RESULT_ARPROT,
        m_axi_RESULT_ARQOS,
        m_axi_RESULT_ARREGION,
        m_axi_RESULT_ARUSER,
        m_axi_RESULT_RVALID,
        m_axi_RESULT_RREADY,
        m_axi_RESULT_RDATA,
        m_axi_RESULT_RLAST,
        m_axi_RESULT_RID,
        m_axi_RESULT_RFIFONUM,
        m_axi_RESULT_RUSER,
        m_axi_RESULT_RRESP,
        m_axi_RESULT_BVALID,
        m_axi_RESULT_BREADY,
        m_axi_RESULT_BRESP,
        m_axi_RESULT_BID,
        m_axi_RESULT_BUSER,
        sext_ln703,
        linear_out_buf_V_address0,
        linear_out_buf_V_ce0,
        linear_out_buf_V_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_RESULT_AWVALID;
input   m_axi_RESULT_AWREADY;
output  [63:0] m_axi_RESULT_AWADDR;
output  [0:0] m_axi_RESULT_AWID;
output  [31:0] m_axi_RESULT_AWLEN;
output  [2:0] m_axi_RESULT_AWSIZE;
output  [1:0] m_axi_RESULT_AWBURST;
output  [1:0] m_axi_RESULT_AWLOCK;
output  [3:0] m_axi_RESULT_AWCACHE;
output  [2:0] m_axi_RESULT_AWPROT;
output  [3:0] m_axi_RESULT_AWQOS;
output  [3:0] m_axi_RESULT_AWREGION;
output  [0:0] m_axi_RESULT_AWUSER;
output   m_axi_RESULT_WVALID;
input   m_axi_RESULT_WREADY;
output  [31:0] m_axi_RESULT_WDATA;
output  [3:0] m_axi_RESULT_WSTRB;
output   m_axi_RESULT_WLAST;
output  [0:0] m_axi_RESULT_WID;
output  [0:0] m_axi_RESULT_WUSER;
output   m_axi_RESULT_ARVALID;
input   m_axi_RESULT_ARREADY;
output  [63:0] m_axi_RESULT_ARADDR;
output  [0:0] m_axi_RESULT_ARID;
output  [31:0] m_axi_RESULT_ARLEN;
output  [2:0] m_axi_RESULT_ARSIZE;
output  [1:0] m_axi_RESULT_ARBURST;
output  [1:0] m_axi_RESULT_ARLOCK;
output  [3:0] m_axi_RESULT_ARCACHE;
output  [2:0] m_axi_RESULT_ARPROT;
output  [3:0] m_axi_RESULT_ARQOS;
output  [3:0] m_axi_RESULT_ARREGION;
output  [0:0] m_axi_RESULT_ARUSER;
input   m_axi_RESULT_RVALID;
output   m_axi_RESULT_RREADY;
input  [31:0] m_axi_RESULT_RDATA;
input   m_axi_RESULT_RLAST;
input  [0:0] m_axi_RESULT_RID;
input  [8:0] m_axi_RESULT_RFIFONUM;
input  [0:0] m_axi_RESULT_RUSER;
input  [1:0] m_axi_RESULT_RRESP;
input   m_axi_RESULT_BVALID;
output   m_axi_RESULT_BREADY;
input  [1:0] m_axi_RESULT_BRESP;
input  [0:0] m_axi_RESULT_BID;
input  [0:0] m_axi_RESULT_BUSER;
input  [61:0] sext_ln703;
output  [3:0] linear_out_buf_V_address0;
output   linear_out_buf_V_ce0;
input  [30:0] linear_out_buf_V_q0;

reg ap_idle;
reg m_axi_RESULT_WVALID;
reg linear_out_buf_V_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln703_fu_147_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    RESULT_blk_n_W;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln703_reg_466;
reg   [0:0] icmp_ln703_reg_466_pp0_iter1_reg;
reg   [0:0] icmp_ln703_reg_466_pp0_iter2_reg;
reg   [0:0] icmp_ln703_reg_466_pp0_iter3_reg;
wire   [0:0] icmp_ln1136_fu_173_p2;
reg   [0:0] icmp_ln1136_reg_475;
reg   [0:0] icmp_ln1136_reg_475_pp0_iter2_reg;
reg   [0:0] icmp_ln1136_reg_475_pp0_iter3_reg;
wire   [0:0] p_Result_1003_fu_179_p3;
reg   [0:0] p_Result_1003_reg_480;
reg   [0:0] p_Result_1003_reg_480_pp0_iter2_reg;
reg   [0:0] p_Result_1003_reg_480_pp0_iter3_reg;
wire   [31:0] tmp_V_33_fu_193_p3;
reg   [31:0] tmp_V_33_reg_485;
reg   [31:0] tmp_V_33_reg_485_pp0_iter2_reg;
reg   [31:0] p_Result_1004_fu_201_p4;
reg   [31:0] p_Result_1004_reg_492;
wire   [31:0] sub_ln1145_fu_218_p2;
reg   [31:0] sub_ln1145_reg_497;
wire   [31:0] lsb_index_fu_224_p2;
reg   [31:0] lsb_index_reg_503;
reg   [30:0] tmp_reg_510;
wire   [0:0] icmp_ln1148_fu_265_p2;
reg   [0:0] icmp_ln1148_reg_515;
wire   [7:0] trunc_ln1144_fu_271_p1;
reg   [7:0] trunc_ln1144_reg_520;
reg   [7:0] trunc_ln1144_reg_520_pp0_iter3_reg;
reg   [62:0] m_4_reg_525;
reg   [0:0] p_Result_1001_reg_530;
wire   [31:0] select_ln1136_fu_447_p3;
reg   [31:0] select_ln1136_reg_540;
reg    ap_condition_exit_pp0_iter4_stage0;
wire   [63:0] i_5_cast_fu_159_p1;
wire    ap_block_pp0_stage0_01001;
reg   [3:0] i_fu_104;
wire   [3:0] add_ln703_fu_153_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_2;
wire  signed [30:0] sext_ln1136_fu_169_p0;
wire  signed [30:0] icmp_ln1136_fu_173_p0;
wire  signed [30:0] p_Result_1003_fu_179_p1;
wire  signed [31:0] sext_ln1136_fu_169_p1;
wire   [31:0] tmp_V_fu_187_p2;
reg   [31:0] l_fu_211_p3;
wire   [5:0] trunc_ln1148_fu_240_p1;
wire   [5:0] sub_ln1148_fu_244_p2;
wire   [31:0] zext_ln1148_fu_250_p1;
wire   [31:0] lshr_ln1148_fu_254_p2;
wire   [31:0] p_Result_s_fu_260_p2;
wire   [0:0] icmp_ln1147_fu_275_p2;
wire   [0:0] tmp_1857_fu_285_p3;
wire   [0:0] p_Result_1000_fu_298_p3;
wire   [0:0] xor_ln1150_fu_292_p2;
wire   [0:0] and_ln1150_fu_304_p2;
wire   [0:0] a_fu_280_p2;
wire   [0:0] or_ln1150_fu_310_p2;
wire   [31:0] add_ln1159_fu_332_p2;
wire   [63:0] zext_ln1158_fu_324_p1;
wire   [63:0] zext_ln1159_fu_337_p1;
wire   [31:0] sub_ln1160_fu_347_p2;
wire   [63:0] zext_ln1160_fu_352_p1;
wire   [0:0] icmp_ln1159_fu_327_p2;
wire   [63:0] lshr_ln1159_fu_341_p2;
wire   [63:0] shl_ln1160_fu_356_p2;
wire   [1:0] or_ln_fu_316_p3;
wire   [63:0] m_2_fu_362_p3;
wire   [63:0] zext_ln1162_fu_370_p1;
wire   [63:0] m_3_fu_374_p2;
wire   [7:0] sub_ln1165_fu_413_p2;
wire   [7:0] select_ln1144_fu_406_p3;
wire   [7:0] add_ln1170_fu_418_p2;
wire   [63:0] zext_ln1163_fu_403_p1;
wire   [8:0] tmp_s_fu_424_p3;
wire   [63:0] p_Result_1005_fu_431_p5;
wire   [31:0] LD_fu_443_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

FracNet_T_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter4_stage0)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln703_fu_147_p2 == 1'd0))) begin
            i_fu_104 <= add_ln703_fu_153_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_104 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln703_reg_466 <= icmp_ln703_fu_147_p2;
        icmp_ln703_reg_466_pp0_iter1_reg <= icmp_ln703_reg_466;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln1136_reg_475_pp0_iter2_reg <= icmp_ln1136_reg_475;
        icmp_ln1136_reg_475_pp0_iter3_reg <= icmp_ln1136_reg_475_pp0_iter2_reg;
        icmp_ln703_reg_466_pp0_iter2_reg <= icmp_ln703_reg_466_pp0_iter1_reg;
        icmp_ln703_reg_466_pp0_iter3_reg <= icmp_ln703_reg_466_pp0_iter2_reg;
        p_Result_1003_reg_480_pp0_iter2_reg <= p_Result_1003_reg_480;
        p_Result_1003_reg_480_pp0_iter3_reg <= p_Result_1003_reg_480_pp0_iter2_reg;
        tmp_V_33_reg_485_pp0_iter2_reg <= tmp_V_33_reg_485;
        trunc_ln1144_reg_520_pp0_iter3_reg <= trunc_ln1144_reg_520;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln703_reg_466 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln1136_reg_475 <= icmp_ln1136_fu_173_p2;
        p_Result_1003_reg_480 <= p_Result_1003_fu_179_p1[32'd30];
        p_Result_1004_reg_492 <= p_Result_1004_fu_201_p4;
        tmp_V_33_reg_485 <= tmp_V_33_fu_193_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1136_reg_475 == 1'd0) & (icmp_ln703_reg_466_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln1148_reg_515 <= icmp_ln1148_fu_265_p2;
        lsb_index_reg_503 <= lsb_index_fu_224_p2;
        sub_ln1145_reg_497 <= sub_ln1145_fu_218_p2;
        tmp_reg_510 <= {{lsb_index_fu_224_p2[31:1]}};
        trunc_ln1144_reg_520 <= trunc_ln1144_fu_271_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1136_reg_475_pp0_iter2_reg == 1'd0) & (icmp_ln703_reg_466_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_4_reg_525 <= {{m_3_fu_374_p2[63:1]}};
        p_Result_1001_reg_530 <= m_3_fu_374_p2[32'd25];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln703_reg_466_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln1136_reg_540 <= select_ln1136_fu_447_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        RESULT_blk_n_W = m_axi_RESULT_WREADY;
    end else begin
        RESULT_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln703_fu_147_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln703_reg_466_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_104;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linear_out_buf_V_ce0 = 1'b1;
    end else begin
        linear_out_buf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_RESULT_WVALID = 1'b1;
    end else begin
        m_axi_RESULT_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LD_fu_443_p1 = p_Result_1005_fu_431_p5[31:0];

assign a_fu_280_p2 = (icmp_ln1148_reg_515 & icmp_ln1147_fu_275_p2);

assign add_ln1159_fu_332_p2 = ($signed(sub_ln1145_reg_497) + $signed(32'd4294967271));

assign add_ln1170_fu_418_p2 = (sub_ln1165_fu_413_p2 + select_ln1144_fu_406_p3);

assign add_ln703_fu_153_p2 = (ap_sig_allocacmp_i_2 + 4'd1);

assign and_ln1150_fu_304_p2 = (xor_ln1150_fu_292_p2 & p_Result_1000_fu_298_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_RESULT_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_RESULT_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_5_cast_fu_159_p1 = ap_sig_allocacmp_i_2;

assign icmp_ln1136_fu_173_p0 = linear_out_buf_V_q0;

assign icmp_ln1136_fu_173_p2 = ((icmp_ln1136_fu_173_p0 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln1147_fu_275_p2 = (($signed(tmp_reg_510) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1148_fu_265_p2 = ((p_Result_s_fu_260_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1159_fu_327_p2 = (($signed(lsb_index_reg_503) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln703_fu_147_p2 = ((ap_sig_allocacmp_i_2 == 4'd10) ? 1'b1 : 1'b0);


always @ (p_Result_1004_reg_492) begin
    if (p_Result_1004_reg_492[0] == 1'b1) begin
        l_fu_211_p3 = 32'd0;
    end else if (p_Result_1004_reg_492[1] == 1'b1) begin
        l_fu_211_p3 = 32'd1;
    end else if (p_Result_1004_reg_492[2] == 1'b1) begin
        l_fu_211_p3 = 32'd2;
    end else if (p_Result_1004_reg_492[3] == 1'b1) begin
        l_fu_211_p3 = 32'd3;
    end else if (p_Result_1004_reg_492[4] == 1'b1) begin
        l_fu_211_p3 = 32'd4;
    end else if (p_Result_1004_reg_492[5] == 1'b1) begin
        l_fu_211_p3 = 32'd5;
    end else if (p_Result_1004_reg_492[6] == 1'b1) begin
        l_fu_211_p3 = 32'd6;
    end else if (p_Result_1004_reg_492[7] == 1'b1) begin
        l_fu_211_p3 = 32'd7;
    end else if (p_Result_1004_reg_492[8] == 1'b1) begin
        l_fu_211_p3 = 32'd8;
    end else if (p_Result_1004_reg_492[9] == 1'b1) begin
        l_fu_211_p3 = 32'd9;
    end else if (p_Result_1004_reg_492[10] == 1'b1) begin
        l_fu_211_p3 = 32'd10;
    end else if (p_Result_1004_reg_492[11] == 1'b1) begin
        l_fu_211_p3 = 32'd11;
    end else if (p_Result_1004_reg_492[12] == 1'b1) begin
        l_fu_211_p3 = 32'd12;
    end else if (p_Result_1004_reg_492[13] == 1'b1) begin
        l_fu_211_p3 = 32'd13;
    end else if (p_Result_1004_reg_492[14] == 1'b1) begin
        l_fu_211_p3 = 32'd14;
    end else if (p_Result_1004_reg_492[15] == 1'b1) begin
        l_fu_211_p3 = 32'd15;
    end else if (p_Result_1004_reg_492[16] == 1'b1) begin
        l_fu_211_p3 = 32'd16;
    end else if (p_Result_1004_reg_492[17] == 1'b1) begin
        l_fu_211_p3 = 32'd17;
    end else if (p_Result_1004_reg_492[18] == 1'b1) begin
        l_fu_211_p3 = 32'd18;
    end else if (p_Result_1004_reg_492[19] == 1'b1) begin
        l_fu_211_p3 = 32'd19;
    end else if (p_Result_1004_reg_492[20] == 1'b1) begin
        l_fu_211_p3 = 32'd20;
    end else if (p_Result_1004_reg_492[21] == 1'b1) begin
        l_fu_211_p3 = 32'd21;
    end else if (p_Result_1004_reg_492[22] == 1'b1) begin
        l_fu_211_p3 = 32'd22;
    end else if (p_Result_1004_reg_492[23] == 1'b1) begin
        l_fu_211_p3 = 32'd23;
    end else if (p_Result_1004_reg_492[24] == 1'b1) begin
        l_fu_211_p3 = 32'd24;
    end else if (p_Result_1004_reg_492[25] == 1'b1) begin
        l_fu_211_p3 = 32'd25;
    end else if (p_Result_1004_reg_492[26] == 1'b1) begin
        l_fu_211_p3 = 32'd26;
    end else if (p_Result_1004_reg_492[27] == 1'b1) begin
        l_fu_211_p3 = 32'd27;
    end else if (p_Result_1004_reg_492[28] == 1'b1) begin
        l_fu_211_p3 = 32'd28;
    end else if (p_Result_1004_reg_492[29] == 1'b1) begin
        l_fu_211_p3 = 32'd29;
    end else if (p_Result_1004_reg_492[30] == 1'b1) begin
        l_fu_211_p3 = 32'd30;
    end else if (p_Result_1004_reg_492[31] == 1'b1) begin
        l_fu_211_p3 = 32'd31;
    end else begin
        l_fu_211_p3 = 32'd32;
    end
end

assign linear_out_buf_V_address0 = i_5_cast_fu_159_p1;

assign lsb_index_fu_224_p2 = ($signed(sub_ln1145_fu_218_p2) + $signed(32'd4294967272));

assign lshr_ln1148_fu_254_p2 = 32'd4294967295 >> zext_ln1148_fu_250_p1;

assign lshr_ln1159_fu_341_p2 = zext_ln1158_fu_324_p1 >> zext_ln1159_fu_337_p1;

assign m_2_fu_362_p3 = ((icmp_ln1159_fu_327_p2[0:0] == 1'b1) ? lshr_ln1159_fu_341_p2 : shl_ln1160_fu_356_p2);

assign m_3_fu_374_p2 = (m_2_fu_362_p3 + zext_ln1162_fu_370_p1);

assign m_axi_RESULT_ARADDR = 64'd0;

assign m_axi_RESULT_ARBURST = 2'd0;

assign m_axi_RESULT_ARCACHE = 4'd0;

assign m_axi_RESULT_ARID = 1'd0;

assign m_axi_RESULT_ARLEN = 32'd0;

assign m_axi_RESULT_ARLOCK = 2'd0;

assign m_axi_RESULT_ARPROT = 3'd0;

assign m_axi_RESULT_ARQOS = 4'd0;

assign m_axi_RESULT_ARREGION = 4'd0;

assign m_axi_RESULT_ARSIZE = 3'd0;

assign m_axi_RESULT_ARUSER = 1'd0;

assign m_axi_RESULT_ARVALID = 1'b0;

assign m_axi_RESULT_AWADDR = 64'd0;

assign m_axi_RESULT_AWBURST = 2'd0;

assign m_axi_RESULT_AWCACHE = 4'd0;

assign m_axi_RESULT_AWID = 1'd0;

assign m_axi_RESULT_AWLEN = 32'd0;

assign m_axi_RESULT_AWLOCK = 2'd0;

assign m_axi_RESULT_AWPROT = 3'd0;

assign m_axi_RESULT_AWQOS = 4'd0;

assign m_axi_RESULT_AWREGION = 4'd0;

assign m_axi_RESULT_AWSIZE = 3'd0;

assign m_axi_RESULT_AWUSER = 1'd0;

assign m_axi_RESULT_AWVALID = 1'b0;

assign m_axi_RESULT_BREADY = 1'b0;

assign m_axi_RESULT_RREADY = 1'b0;

assign m_axi_RESULT_WDATA = select_ln1136_reg_540;

assign m_axi_RESULT_WID = 1'd0;

assign m_axi_RESULT_WLAST = 1'b0;

assign m_axi_RESULT_WSTRB = 4'd15;

assign m_axi_RESULT_WUSER = 1'd0;

assign or_ln1150_fu_310_p2 = (and_ln1150_fu_304_p2 | a_fu_280_p2);

assign or_ln_fu_316_p3 = {{1'd0}, {or_ln1150_fu_310_p2}};

assign p_Result_1000_fu_298_p3 = tmp_V_33_reg_485_pp0_iter2_reg[lsb_index_reg_503];

assign p_Result_1003_fu_179_p1 = linear_out_buf_V_q0;

assign p_Result_1003_fu_179_p3 = p_Result_1003_fu_179_p1[32'd30];

integer ap_tvar_int_0;

always @ (tmp_V_33_fu_193_p3) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_1004_fu_201_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_1004_fu_201_p4[ap_tvar_int_0] = tmp_V_33_fu_193_p3[31 - ap_tvar_int_0];
        end
    end
end

assign p_Result_1005_fu_431_p5 = {{zext_ln1163_fu_403_p1[63:32]}, {tmp_s_fu_424_p3}, {zext_ln1163_fu_403_p1[22:0]}};

assign p_Result_s_fu_260_p2 = (tmp_V_33_reg_485 & lshr_ln1148_fu_254_p2);

assign select_ln1136_fu_447_p3 = ((icmp_ln1136_reg_475_pp0_iter3_reg[0:0] == 1'b1) ? 32'd0 : LD_fu_443_p1);

assign select_ln1144_fu_406_p3 = ((p_Result_1001_reg_530[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign sext_ln1136_fu_169_p0 = linear_out_buf_V_q0;

assign sext_ln1136_fu_169_p1 = sext_ln1136_fu_169_p0;

assign shl_ln1160_fu_356_p2 = zext_ln1158_fu_324_p1 << zext_ln1160_fu_352_p1;

assign sub_ln1145_fu_218_p2 = (32'd32 - l_fu_211_p3);

assign sub_ln1148_fu_244_p2 = ($signed(6'd57) - $signed(trunc_ln1148_fu_240_p1));

assign sub_ln1160_fu_347_p2 = (32'd25 - sub_ln1145_reg_497);

assign sub_ln1165_fu_413_p2 = (8'd10 - trunc_ln1144_reg_520_pp0_iter3_reg);

assign tmp_1857_fu_285_p3 = lsb_index_reg_503[32'd31];

assign tmp_V_33_fu_193_p3 = ((p_Result_1003_fu_179_p3[0:0] == 1'b1) ? tmp_V_fu_187_p2 : sext_ln1136_fu_169_p1);

assign tmp_V_fu_187_p2 = ($signed(32'd0) - $signed(sext_ln1136_fu_169_p1));

assign tmp_s_fu_424_p3 = {{p_Result_1003_reg_480_pp0_iter3_reg}, {add_ln1170_fu_418_p2}};

assign trunc_ln1144_fu_271_p1 = l_fu_211_p3[7:0];

assign trunc_ln1148_fu_240_p1 = sub_ln1145_fu_218_p2[5:0];

assign xor_ln1150_fu_292_p2 = (tmp_1857_fu_285_p3 ^ 1'd1);

assign zext_ln1148_fu_250_p1 = sub_ln1148_fu_244_p2;

assign zext_ln1158_fu_324_p1 = tmp_V_33_reg_485_pp0_iter2_reg;

assign zext_ln1159_fu_337_p1 = add_ln1159_fu_332_p2;

assign zext_ln1160_fu_352_p1 = sub_ln1160_fu_347_p2;

assign zext_ln1162_fu_370_p1 = or_ln_fu_316_p3;

assign zext_ln1163_fu_403_p1 = m_4_reg_525;

endmodule //FracNet_T_FracNet_T_Pipeline_write_output
