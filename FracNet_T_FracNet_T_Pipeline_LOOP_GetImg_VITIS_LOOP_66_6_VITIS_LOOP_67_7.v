// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FracNet_T_FracNet_T_Pipeline_LOOP_GetImg_VITIS_LOOP_66_6_VITIS_LOOP_67_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_IMG_AWVALID,
        m_axi_IMG_AWREADY,
        m_axi_IMG_AWADDR,
        m_axi_IMG_AWID,
        m_axi_IMG_AWLEN,
        m_axi_IMG_AWSIZE,
        m_axi_IMG_AWBURST,
        m_axi_IMG_AWLOCK,
        m_axi_IMG_AWCACHE,
        m_axi_IMG_AWPROT,
        m_axi_IMG_AWQOS,
        m_axi_IMG_AWREGION,
        m_axi_IMG_AWUSER,
        m_axi_IMG_WVALID,
        m_axi_IMG_WREADY,
        m_axi_IMG_WDATA,
        m_axi_IMG_WSTRB,
        m_axi_IMG_WLAST,
        m_axi_IMG_WID,
        m_axi_IMG_WUSER,
        m_axi_IMG_ARVALID,
        m_axi_IMG_ARREADY,
        m_axi_IMG_ARADDR,
        m_axi_IMG_ARID,
        m_axi_IMG_ARLEN,
        m_axi_IMG_ARSIZE,
        m_axi_IMG_ARBURST,
        m_axi_IMG_ARLOCK,
        m_axi_IMG_ARCACHE,
        m_axi_IMG_ARPROT,
        m_axi_IMG_ARQOS,
        m_axi_IMG_ARREGION,
        m_axi_IMG_ARUSER,
        m_axi_IMG_RVALID,
        m_axi_IMG_RREADY,
        m_axi_IMG_RDATA,
        m_axi_IMG_RLAST,
        m_axi_IMG_RID,
        m_axi_IMG_RFIFONUM,
        m_axi_IMG_RUSER,
        m_axi_IMG_RRESP,
        m_axi_IMG_BVALID,
        m_axi_IMG_BREADY,
        m_axi_IMG_BRESP,
        m_axi_IMG_BID,
        m_axi_IMG_BUSER,
        sext_ln65,
        msb_fmap_V_address0,
        msb_fmap_V_ce0,
        msb_fmap_V_we0,
        msb_fmap_V_d0,
        msb_fmap_V_1_address0,
        msb_fmap_V_1_ce0,
        msb_fmap_V_1_we0,
        msb_fmap_V_1_d0,
        msb_fmap_V_2_address0,
        msb_fmap_V_2_ce0,
        msb_fmap_V_2_we0,
        msb_fmap_V_2_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_IMG_AWVALID;
input   m_axi_IMG_AWREADY;
output  [63:0] m_axi_IMG_AWADDR;
output  [0:0] m_axi_IMG_AWID;
output  [31:0] m_axi_IMG_AWLEN;
output  [2:0] m_axi_IMG_AWSIZE;
output  [1:0] m_axi_IMG_AWBURST;
output  [1:0] m_axi_IMG_AWLOCK;
output  [3:0] m_axi_IMG_AWCACHE;
output  [2:0] m_axi_IMG_AWPROT;
output  [3:0] m_axi_IMG_AWQOS;
output  [3:0] m_axi_IMG_AWREGION;
output  [0:0] m_axi_IMG_AWUSER;
output   m_axi_IMG_WVALID;
input   m_axi_IMG_WREADY;
output  [63:0] m_axi_IMG_WDATA;
output  [7:0] m_axi_IMG_WSTRB;
output   m_axi_IMG_WLAST;
output  [0:0] m_axi_IMG_WID;
output  [0:0] m_axi_IMG_WUSER;
output   m_axi_IMG_ARVALID;
input   m_axi_IMG_ARREADY;
output  [63:0] m_axi_IMG_ARADDR;
output  [0:0] m_axi_IMG_ARID;
output  [31:0] m_axi_IMG_ARLEN;
output  [2:0] m_axi_IMG_ARSIZE;
output  [1:0] m_axi_IMG_ARBURST;
output  [1:0] m_axi_IMG_ARLOCK;
output  [3:0] m_axi_IMG_ARCACHE;
output  [2:0] m_axi_IMG_ARPROT;
output  [3:0] m_axi_IMG_ARQOS;
output  [3:0] m_axi_IMG_ARREGION;
output  [0:0] m_axi_IMG_ARUSER;
input   m_axi_IMG_RVALID;
output   m_axi_IMG_RREADY;
input  [63:0] m_axi_IMG_RDATA;
input   m_axi_IMG_RLAST;
input  [0:0] m_axi_IMG_RID;
input  [8:0] m_axi_IMG_RFIFONUM;
input  [0:0] m_axi_IMG_RUSER;
input  [1:0] m_axi_IMG_RRESP;
input   m_axi_IMG_BVALID;
output   m_axi_IMG_BREADY;
input  [1:0] m_axi_IMG_BRESP;
input  [0:0] m_axi_IMG_BID;
input  [0:0] m_axi_IMG_BUSER;
input  [60:0] sext_ln65;
output  [10:0] msb_fmap_V_address0;
output   msb_fmap_V_ce0;
output   msb_fmap_V_we0;
output  [63:0] msb_fmap_V_d0;
output  [10:0] msb_fmap_V_1_address0;
output   msb_fmap_V_1_ce0;
output   msb_fmap_V_1_we0;
output  [63:0] msb_fmap_V_1_d0;
output  [10:0] msb_fmap_V_2_address0;
output   msb_fmap_V_2_ce0;
output   msb_fmap_V_2_we0;
output  [63:0] msb_fmap_V_2_d0;

reg ap_idle;
reg m_axi_IMG_RREADY;
reg msb_fmap_V_ce0;
reg msb_fmap_V_we0;
reg msb_fmap_V_1_ce0;
reg msb_fmap_V_1_we0;
reg msb_fmap_V_2_ce0;
reg msb_fmap_V_2_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln65_reg_405;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln65_fu_180_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    IMG_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [1:0] select_ln65_1_fu_253_p3;
reg   [1:0] select_ln65_1_reg_409;
wire   [5:0] select_ln66_fu_273_p3;
reg   [5:0] select_ln66_reg_413;
wire   [5:0] select_ln66_1_fu_281_p3;
reg   [5:0] select_ln66_1_reg_418;
reg   [63:0] IMG_addr_read_reg_424;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln69_2_fu_357_p1;
reg   [5:0] col_fu_78;
wire   [5:0] add_ln67_fu_292_p2;
wire    ap_loop_init;
reg   [5:0] row_fu_82;
reg   [11:0] indvar_flatten6_fu_86;
wire   [11:0] select_ln66_2_fu_304_p3;
reg   [1:0] c_fu_90;
reg   [11:0] indvar_flatten20_fu_94;
wire   [11:0] add_ln65_1_fu_186_p2;
reg   [11:0] ap_sig_allocacmp_indvar_flatten20_load;
wire   [0:0] icmp_ln66_fu_221_p2;
wire   [0:0] icmp_ln67_fu_241_p2;
wire   [0:0] xor_ln65_fu_235_p2;
wire   [1:0] add_ln65_fu_215_p2;
wire   [5:0] select_ln65_fu_227_p3;
wire   [0:0] and_ln65_fu_247_p2;
wire   [0:0] or_ln66_fu_267_p2;
wire   [5:0] add_ln66_fu_261_p2;
wire   [11:0] add_ln66_1_fu_298_p2;
wire   [10:0] p_shl_fu_335_p3;
wire   [10:0] zext_ln69_fu_332_p1;
wire   [10:0] add_ln69_fu_342_p2;
wire   [10:0] zext_ln69_1_fu_348_p1;
wire   [10:0] add_ln69_1_fu_351_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

FracNet_T_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            c_fu_90 <= 2'd0;
        end else if (((icmp_ln65_reg_405 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            c_fu_90 <= select_ln65_1_fu_253_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            col_fu_78 <= 6'd0;
        end else if (((icmp_ln65_reg_405 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            col_fu_78 <= add_ln67_fu_292_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_fu_180_p2 == 1'd0))) begin
            indvar_flatten20_fu_94 <= add_ln65_1_fu_186_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten20_fu_94 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_86 <= 12'd0;
        end else if (((icmp_ln65_reg_405 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten6_fu_86 <= select_ln66_2_fu_304_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            row_fu_82 <= 6'd0;
        end else if (((icmp_ln65_reg_405 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            row_fu_82 <= select_ln66_1_fu_281_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln65_reg_405 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IMG_addr_read_reg_424 <= m_axi_IMG_RDATA;
        select_ln65_1_reg_409 <= select_ln65_1_fu_253_p3;
        select_ln66_1_reg_418 <= select_ln66_1_fu_281_p3;
        select_ln66_reg_413 <= select_ln66_fu_273_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln65_reg_405 <= icmp_ln65_fu_180_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln65_reg_405 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IMG_blk_n_R = m_axi_IMG_RVALID;
    end else begin
        IMG_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_fu_180_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln65_reg_405 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten20_load = 12'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten20_load = indvar_flatten20_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln65_reg_405 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_IMG_RREADY = 1'b1;
    end else begin
        m_axi_IMG_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        msb_fmap_V_1_ce0 = 1'b1;
    end else begin
        msb_fmap_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (select_ln65_1_reg_409 == 2'd1))) begin
        msb_fmap_V_1_we0 = 1'b1;
    end else begin
        msb_fmap_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        msb_fmap_V_2_ce0 = 1'b1;
    end else begin
        msb_fmap_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln65_1_reg_409 == 2'd0) & ~(select_ln65_1_reg_409 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        msb_fmap_V_2_we0 = 1'b1;
    end else begin
        msb_fmap_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        msb_fmap_V_ce0 = 1'b1;
    end else begin
        msb_fmap_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (select_ln65_1_reg_409 == 2'd0))) begin
        msb_fmap_V_we0 = 1'b1;
    end else begin
        msb_fmap_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln65_1_fu_186_p2 = (ap_sig_allocacmp_indvar_flatten20_load + 12'd1);

assign add_ln65_fu_215_p2 = (c_fu_90 + 2'd1);

assign add_ln66_1_fu_298_p2 = (indvar_flatten6_fu_86 + 12'd1);

assign add_ln66_fu_261_p2 = (select_ln65_fu_227_p3 + 6'd1);

assign add_ln67_fu_292_p2 = (select_ln66_fu_273_p3 + 6'd1);

assign add_ln69_1_fu_351_p2 = (add_ln69_fu_342_p2 + zext_ln69_1_fu_348_p1);

assign add_ln69_fu_342_p2 = (p_shl_fu_335_p3 + zext_ln69_fu_332_p1);

assign and_ln65_fu_247_p2 = (xor_ln65_fu_235_p2 & icmp_ln67_fu_241_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln65_reg_405 == 1'd0) & (m_axi_IMG_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln65_reg_405 == 1'd0) & (m_axi_IMG_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln65_reg_405 == 1'd0) & (m_axi_IMG_RVALID == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln65_fu_180_p2 = ((ap_sig_allocacmp_indvar_flatten20_load == 12'd3072) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_221_p2 = ((indvar_flatten6_fu_86 == 12'd1024) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_241_p2 = ((col_fu_78 == 6'd32) ? 1'b1 : 1'b0);

assign m_axi_IMG_ARADDR = 64'd0;

assign m_axi_IMG_ARBURST = 2'd0;

assign m_axi_IMG_ARCACHE = 4'd0;

assign m_axi_IMG_ARID = 1'd0;

assign m_axi_IMG_ARLEN = 32'd0;

assign m_axi_IMG_ARLOCK = 2'd0;

assign m_axi_IMG_ARPROT = 3'd0;

assign m_axi_IMG_ARQOS = 4'd0;

assign m_axi_IMG_ARREGION = 4'd0;

assign m_axi_IMG_ARSIZE = 3'd0;

assign m_axi_IMG_ARUSER = 1'd0;

assign m_axi_IMG_ARVALID = 1'b0;

assign m_axi_IMG_AWADDR = 64'd0;

assign m_axi_IMG_AWBURST = 2'd0;

assign m_axi_IMG_AWCACHE = 4'd0;

assign m_axi_IMG_AWID = 1'd0;

assign m_axi_IMG_AWLEN = 32'd0;

assign m_axi_IMG_AWLOCK = 2'd0;

assign m_axi_IMG_AWPROT = 3'd0;

assign m_axi_IMG_AWQOS = 4'd0;

assign m_axi_IMG_AWREGION = 4'd0;

assign m_axi_IMG_AWSIZE = 3'd0;

assign m_axi_IMG_AWUSER = 1'd0;

assign m_axi_IMG_AWVALID = 1'b0;

assign m_axi_IMG_BREADY = 1'b0;

assign m_axi_IMG_WDATA = 64'd0;

assign m_axi_IMG_WID = 1'd0;

assign m_axi_IMG_WLAST = 1'b0;

assign m_axi_IMG_WSTRB = 8'd0;

assign m_axi_IMG_WUSER = 1'd0;

assign m_axi_IMG_WVALID = 1'b0;

assign msb_fmap_V_1_address0 = zext_ln69_2_fu_357_p1;

assign msb_fmap_V_1_d0 = IMG_addr_read_reg_424;

assign msb_fmap_V_2_address0 = zext_ln69_2_fu_357_p1;

assign msb_fmap_V_2_d0 = IMG_addr_read_reg_424;

assign msb_fmap_V_address0 = zext_ln69_2_fu_357_p1;

assign msb_fmap_V_d0 = IMG_addr_read_reg_424;

assign or_ln66_fu_267_p2 = (icmp_ln66_fu_221_p2 | and_ln65_fu_247_p2);

assign p_shl_fu_335_p3 = {{select_ln66_1_reg_418}, {5'd0}};

assign select_ln65_1_fu_253_p3 = ((icmp_ln66_fu_221_p2[0:0] == 1'b1) ? add_ln65_fu_215_p2 : c_fu_90);

assign select_ln65_fu_227_p3 = ((icmp_ln66_fu_221_p2[0:0] == 1'b1) ? 6'd0 : row_fu_82);

assign select_ln66_1_fu_281_p3 = ((and_ln65_fu_247_p2[0:0] == 1'b1) ? add_ln66_fu_261_p2 : select_ln65_fu_227_p3);

assign select_ln66_2_fu_304_p3 = ((icmp_ln66_fu_221_p2[0:0] == 1'b1) ? 12'd1 : add_ln66_1_fu_298_p2);

assign select_ln66_fu_273_p3 = ((or_ln66_fu_267_p2[0:0] == 1'b1) ? 6'd0 : col_fu_78);

assign xor_ln65_fu_235_p2 = (icmp_ln66_fu_221_p2 ^ 1'd1);

assign zext_ln69_1_fu_348_p1 = select_ln66_reg_413;

assign zext_ln69_2_fu_357_p1 = add_ln69_1_fu_351_p2;

assign zext_ln69_fu_332_p1 = select_ln66_1_reg_418;

endmodule //FracNet_T_FracNet_T_Pipeline_LOOP_GetImg_VITIS_LOOP_66_6_VITIS_LOOP_67_7
